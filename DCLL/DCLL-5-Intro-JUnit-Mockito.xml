<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0">
    <info>
        <title>DCLL 5 - Introduction à JUnit</title>
        <author>
            <personname>John Tranier &amp; Franck Silvestre</personname>
        </author>
        <keywordset>
            <keyword role="hashtag">Junit</keyword>
        </keywordset>
        <legalnotice>
            <para>
                <link xlink:href="http://creativecommons.org/licenses/by-nc/3.0/">Cette oeuvre est mise à disposition
                    selon les termes de la Licence Creative Commons Paternité - Pas d'Utilisation Commerciale 3.0 non
                    transposé.
                </link>
            </para>
        </legalnotice>
    </info>
    <section xml:id="sect_1">
        <title>01 - Tests, généralités</title>
        <section role="slide" xml:id="dcll_5_1">
            <title>Les types de tests</title>
            <itemizedlist>
                <listitem>
                    <para>Tests unitaires</para>
                </listitem>
                <listitem>
                    <para>Tests d'intégration</para>
                </listitem>
                <listitem>
                    <para>Tests fonctionnels</para>
                </listitem>
                <listitem>
                    <para>Test de charge</para>
                </listitem>
                <listitem>
                    <para>Et bien d'autres (accessibilité, conformité W3C,...)</para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_3">
            <title>À quoi servent les tests ?</title>
            <itemizedlist>
                <listitem>
                    <para>Assurer que le composant fonctionne comme prévu.</para>
                </listitem>
                <listitem>
                    <para>Mais pas que cela...
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>Assurer la non régression</para>
                        </listitem>
                        <listitem>
                            <para>Permettre le refactoring</para>
                        </listitem>
                        <listitem>
                            <para>Permettre de comprendre le code</para>
                        </listitem>
                        <listitem>
                            <para>Améliorer l’architecture</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>Le code devient explicité, organisé, assuré</para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_4">
            <title>Les limites...</title>
            <itemizedlist>
                <listitem>
                    <para>Les tests ne garantissent pas le bon fonctionnement de l’application</para>
                </listitem>
                <listitem>
                    <para>Evaluation partielle
                    </para>
                </listitem>
                <listitem>
                    <para>Un test peut contenir des bugs</para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_5">
            <title>Focus sur tests unitaires</title>
            <itemizedlist>
                <listitem>
                    <para>Isoler chaque « unité » d’un programme  et vérifier qu’elle fonctionne comme prévu.</para>
                </listitem>
                <listitem>
                    <para>Définir le contrat que l’unité de code doit satisfaire.
                    </para>
                    <para>Ce contrat est « exécutable » ==> Automatisation.</para>
                </listitem>
                <listitem>
                    <para>En POO : unité = la classe</para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_6">
            <title>Un test unitaire doit être</title>
            <itemizedlist>
                <listitem>
                    <para>Isolé (indépendant de tous les autres tests)</para>
                </listitem>
                <listitem>
                    <para>Déterministe (i.e. reproductible)
                    </para>
                    <para>Simple et rapide à développer et à exécuter</para>
                </listitem>
                <listitem>
                    <para>Exécutable automatiquement</para>
                </listitem>
                <listitem>
                    <para>Limité à une unité de code isolée</para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_7">
            <title>Physionomie d'un test</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>Given …</emphasis>
                    </para>
                    <para>Construction de « l’état du monde »
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>When …</emphasis>
                    </para>
                    <para>Exécution du code testé
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Then …</emphasis>
                    </para>
                    <para>Vérification du résultat obtenu (assertions, métaphore de l’oracle)</para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_8">
            <title>Que faut-il tester ?</title>
            <itemizedlist>
                <listitem>
                    <para>
                        Cas en succès : fonctionnement normal
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Cas d’erreur : test sur la gestion d’erreur
                    </para>
                </listitem>
                <listitem>
                    <para>Cas aux limites : test de la robustesse</para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_9">
            <title>Le résultat d'un test</title>
            <itemizedlist>
                <listitem>
                    <para>
                        Success : test réussi
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Failure : au moins une assertion est violée
                    </para>
                </listitem>
                <listitem>
                    <para>Error : erreur inattendue à l’exécution</para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_10">
            <title>La couverture de code</title>
            <mediaobject>
                <alt>Couverture de code</alt>
                <imageobject>
                    <imagedata fileref="images/coverage.png"/>
                </imageobject>
            </mediaobject>
        </section>
        <section role="slide" xml:id="dcll_5_11">
            <title>Aspects méthodologiques</title>
            <itemizedlist>
                <listitem>
                    <para>
                        Pour pouvoir tester unitairement :
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>Les composants doivent être séparables (separation of concerns)</para>
                        </listitem>
                        <listitem>
                            <para>Les composants doivent être simples</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        Si on se retrouve à debugger à coup de « println » il vaut mieux écrire un test à la place
                    </para>
                </listitem>
                <listitem>
                    <para>Quand on trouve un bug, écrire un test qui le caractérise</para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_12">
            <title>Test Driven Development</title>
            <itemizedlist>
                <listitem>
                    <para>
                        Initialement conceptualisé par Erich Gamma et Kent Beck
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Utilisation des tests unitaires comme spécification du code
                    </para>
                </listitem>
                <listitem>
                    <para>Plus généralement intégré aux approches de développement agile (eXtreme Programming, Scrum)
                    </para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_13">
            <title>Cycle de TDD</title>
            <itemizedlist>
                <listitem>
                    <para>
                        1. Ecrire un test
                    </para>
                </listitem>
                <listitem>
                    <para>
                        2. Vérifier qu’il échoue (aucune implémentation)
                    </para>
                </listitem>
                <listitem>
                    <para>3. Ecrire juste le code suffisant pour faire passer le test
                    </para>
                </listitem>
                <listitem>
                    <para>
                        4. Vérifier que le test passe
                    </para>
                </listitem>
                <listitem>
                    <para>
                        5. Réviser le code (refactoring), i.e. l’améliorer en conservant les mêmes fonctionnalités
                    </para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_14">
            <title>Bénéfices du TDD</title>
            <itemizedlist>
                <listitem>
                    <para>
                        On utilise le programme avant même qu’il existe (utilisation de l’interface avant même son
                        implémentation)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Diminue les erreurs de conception
                    </para>
                </listitem>
                <listitem>
                    <para>Construction conjointe du programme et de la suite de tests de non-régression
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Estimation de l’état d’avancement du projet
                    </para>
                </listitem>
            </itemizedlist>
        </section>
    </section>
    <section xml:id="sect_2">
        <title>02 - JUnit</title>
        <section role="slide" xml:id="dcll_5_15">
            <title>JUnit</title>
            <itemizedlist>
                <listitem>
                    <para>Framework pour les tests unitaires en Java
                    </para>
                </listitem>
                <listitem>
                    <para>Open Source (https://github.com/junit-team/junit)
                    </para>
                </listitem>
                <listitem>
                    <para>Intégration dans Eclipse &amp; Maven
                    </para>
                </listitem>
                <listitem>
                    <para>Massivement utilisé dans l’industrie</para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_16">
            <title>Bénéfices de JUnit</title>
            <itemizedlist>
                <listitem>
                    <para>Facilités pour la conception de tests unitaires
                    </para>
                </listitem>
                <listitem>
                    <para>Lancement automatique de suites de tests
                    </para>
                </listitem>
                <listitem>
                    <para>Génération de rapports d’exécution
                    </para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_17">
            <title>Exemple de rapport</title>
            <mediaobject>
                <alt>Rapport JUnit</alt>
                <imageobject>
                    <imagedata fileref="images/junitreport.png"/>
                </imageobject>
            </mediaobject>
        </section>
        <section role="slide" xml:id="dcll_5_18">
            <title>JUnit par exemple</title>
            <itemizedlist>
                <listitem>
                    <para>Une interface Stack
                    </para>
                </listitem>
                <listitem>
                    <para>Une 1ère implémentation vide SimpleStack
                    </para>
                </listitem>
                <listitem>
                    <para>Un test unitaire SimpleStackTest
                    </para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_19">
            <title>Interface Stack</title>
            <para><code>
 public interface Stack {

 /**
 * Tests if this stack is empty
 */
 public boolean isEmpty();

 /**
 * Returns the number of items in this stack.
 */
 public int getSize();

 /**
 * Pushes an item onto the top of this stack.
 * null item is allowed.
 */
 public void push(Item item);

 /**
 * Looks at the object at the top of this stack without removing it from the stack.
 */
 public Item peek() throws EmptyStackException;

 /**
 * Removes the object at the top of this stack and returns that object as the value of this function.
 * @throws EmptyStackException if this stack is empty.
 */
 public Item pop() throws EmptyStackException;

 }
            </code></para>
        </section>
        <section role="slide" xml:id="dcll_5_20">
            <title>Classe SimpleStack</title>
            <para><code>
   public class SimpleStack implements Stack {
    
   @Override
   public boolean isEmpty() {
   // TODO Auto-generated method stub
   return false;
   }
    
   @Override
   public int getSize() {
   // TODO Auto-generated method stub
   return 0;
   }
    
   @Override
   public void push(Item item) {
   // TODO Auto-generated method stub
    
   }
    
   @Override
   public Item peek() throws EmptyStackException {
   // TODO Auto-generated method stub
   return null;
   }
    
   @Override
   public Item pop() throws EmptyStackException {
   // TODO Auto-generated method stub
   return null;
   }
   }
            </code></para>
        </section>
        <section role="slide" xml:id="dcll_5_21">
            <title>Classe SimpleStackTest</title>
            <para><code>
  import static org.junit.Assert.*;
  import org.junit.Test;
   
  public class SimpleStackTest { // Test class
   
  @Test
  public void testCreateEmptyStack() { // Test case
   
  // Code under test
  Stack stack = new SimpleStack();
   
  // Assertions (oracle)
  assertTrue("A new stack should be empty", stack.isEmpty());
  assertEquals("A new stack has no element", 0, stack.getSize());
  }
   
  @Test
  public void testPush() throws EmptyStackException {
   
  // Setup the "state of the world"
  Stack stack = new SimpleStack();
  Item item = new SimpleItem();
   
  // Code under test
  stack.push(item);
   
  // assertions (oracle)
  assertFalse("The stack must be not empty", !stack.isEmpty());
  assertEquals("The stack constains 1 item", 1, stack.getSize());
  assertSame("The pushed item is on top of the stack", item, stack.peek());
  }
  }
            </code></para>
        </section>
        <section role="slide" xml:id="dcll_5_22">
            <title>Classe SimpleStackTest</title>
            <para><code>
  @Test(expected = EmptyStackException.class)
  public void testPopOnEmptyStack()  throws EmptyStackException {
  // Setup the "state of the world"
  Stack stack = new SimpleStack();
   
  // Code under test
  stack.pop(); // should throws an EmptyStackException.
  }
            </code></para>
        </section>
        <section role="slide" xml:id="dcll_5_23">
            <title>JUnit - terminologie</title>
            <itemizedlist>
                <listitem>
                    <para>Test class : contient plusieurs cas de tests (portant sur une même classe)
                    </para>
                </listitem>
                <listitem>
                    <para>Test method : un cas de test (portant sur une méthode)
                    </para>
                </listitem>
                <listitem>
                    <para>Assertion : expression dont on veut vérifier la véracité
                    </para>
                </listitem>
                <listitem>
                    <para>Test fixture : construction d’un état commun à plusieurs cas de test
                        </para>
                </listitem>
                <listitem>
                    <para>Test suite : regroupement de classes de test que l’on peut exécuter ensemble</para>
                </listitem>
            </itemizedlist>
        </section>
        <section role="slide" xml:id="dcll_5_24">
            <title>Les assertions</title>
            <para>Une assertion non vérifiée lève une exception</para>
            <mediaobject>
                <alt>Assertions</alt>
                <imageobject>
                    <imagedata fileref="images/junitassertions.png"/>
                </imageobject>
            </mediaobject>
        </section>
        <section role="slide" xml:id="dcll_5_25">
            <title>Les annotations</title>
            <mediaobject>
                <alt>Assertions</alt>
                <imageobject>
                    <imagedata fileref="images/junitannotations.png"/>
                </imageobject>
            </mediaobject>
        </section>
        <section role="slide" xml:id="dcll_5_26">
            <title>Aspects pratiques</title>
            <itemizedlist>
                <listitem>
                    <para>Une classe de test par classe de programme
                    </para>
                    <para><emphasis>&lt;nomClasse&gt;Test</emphasis></para>
                </listitem>
                <listitem>
                    <para>Une ou plusieurs méthodes de test par méthode de la classe
                    </para>
                    <para><emphasis>test&lt;nomMethode&gt; [&lt;cas&gt;][&lt;attendu&gt;]</emphasis></para>
                </listitem>
                <listitem>
                    <para>Fichiers sources des classes de tests séparées des classes du programme
                    </para>
                    <para><emphasis>/src/* et test/*</emphasis></para>
                </listitem>
            </itemizedlist>
        </section>
    </section>
</article>
